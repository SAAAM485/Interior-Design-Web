import fs from 'fs';
import path from 'path';

const IMAGES_DIR = path.resolve('./src/lib/assets/images');
const OUT_FILE = path.resolve('./src/lib/image-map.ts');
const QUERY = '?w=400;800&format=avif;webp;jpg&as=picture';

function walk(dir) {
	const files = [];
	for (const name of fs.readdirSync(dir)) {
		const full = path.join(dir, name);
		const stat = fs.statSync(full);
		if (stat.isDirectory()) files.push(...walk(full));
		else if (/\.(jpe?g|png)$/i.test(name)) files.push(full);
	}
	return files;
}

const files = walk(IMAGES_DIR);

let out = `// This file is autogenerated by scripts/generate-image-map.mjs\n\n`;
files.forEach((file, i) => {
	const rel = path.relative(path.resolve('./src'), file).replace(/\\/g, '/'); // e.g. lib/assets/images/...
	// use $lib alias; adjust if your project setup differs
	const importPath = `$lib/${rel.replace(/^lib\//, '')}${QUERY}`;
	out += `import img${i} from '${importPath}';\n`;
});

out += `\nexport const imageMap: Record<string, any> = {\n`;
files.forEach((file, i) => {
	const repoPath = '/src/' + path.relative(path.resolve('./src'), file).replace(/\\/g, '/');
	out += `  '${repoPath}': img${i},\n`;
});
out += `};\n`;

fs.writeFileSync(OUT_FILE, out, 'utf8');
console.log('Wrote', OUT_FILE);
